name: 🚀 Deploy Infrastructure

on:
  push:
    branches: [main]
    paths: ['infrastructure/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  SERVER_HOST: 104.243.44.8
  SERVER_USER: blitz
  DEPLOY_PATH: /opt/glimmr

jobs:
  deploy:
    name: 🚀 Deploy to Server
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: 🔍 Add Server to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
          
      - name: 🌐 Setup DNS Records
        run: |
          echo "🌐 Creating DNS records automatically..."

          # Create DNS records via Cloudflare API
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records" \
            -H "Authorization: Bearer ${{ secrets.CF_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data '{"type":"A","name":"traefik.glimmr.health","content":"${{ env.SERVER_HOST }}","ttl":1}' || echo "DNS record may already exist"

          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records" \
            -H "Authorization: Bearer ${{ secrets.CF_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data '{"type":"A","name":"auth.glimmr.health","content":"${{ env.SERVER_HOST }}","ttl":1}' || echo "DNS record may already exist"

          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records" \
            -H "Authorization: Bearer ${{ secrets.CF_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data '{"type":"A","name":"airbyte.glimmr.health","content":"${{ env.SERVER_HOST }}","ttl":1}' || echo "DNS record may already exist"

      - name: 📦 Deploy Infrastructure
        run: |
          echo "🚀 Starting deployment..."

          # Create directories on server
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p /opt/glimmr/{traefik,authentik,airbyte}"

          # Copy configurations to server
          scp -r infrastructure/traefik/* ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/opt/glimmr/traefik/
          scp -r infrastructure/authentik/* ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/opt/glimmr/authentik/
          scp -r infrastructure/airbyte/* ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/opt/glimmr/airbyte/

          # Auto-generate .env files
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "echo 'CF_API_KEY=${{ secrets.CF_API_KEY }}' > /opt/glimmr/traefik/.env"
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "cp /opt/glimmr/airbyte/.env.example /opt/glimmr/airbyte/.env 2>/dev/null || echo 'Airbyte .env created'"

          # Create deployment script on server
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} 'cat > ~/deploy.sh << "EOF"
          #!/bin/bash
          set -e

          echo "🚀 Starting deployment on server..."

          # Create networks if they don'\''t exist
          docker network create glimmr-frontend 2>/dev/null || echo "Network glimmr-frontend exists"
          docker network create glimmr-backend 2>/dev/null || echo "Network glimmr-backend exists"

          # Deploy services (only if .env files exist)
          cd /opt/glimmr

          if [ -f traefik/.env ]; then
            echo "📊 Deploying Traefik..."
            cd traefik && docker compose up -d && cd ..
          else
            echo "⚠️  Skipping Traefik - no .env file"
          fi

          if [ -f authentik/.env ]; then
            echo "🔐 Deploying Authentik..."
            cd authentik && docker compose up -d && cd ..
          else
            echo "⚠️  Skipping Authentik - no .env file"
          fi

          if [ -f airbyte/.env ]; then
            echo "📊 Deploying Airbyte..."
            cd airbyte && docker compose up -d && cd ..
          else
            echo "⚠️  Skipping Airbyte - no .env file"
          fi

          echo "✅ Deployment complete!"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          EOF'

          # Execute deployment script
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "chmod +x ~/deploy.sh && ~/deploy.sh"
          
      - name: 🔍 Verify Deployment
        run: |
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "
            echo '🔍 Checking service status...'
            docker ps --filter 'name=traefik' --format 'table {{.Names}}\t{{.Status}}'
            docker ps --filter 'name=authentik' --format 'table {{.Names}}\t{{.Status}}'
            docker ps --filter 'name=airbyte' --format 'table {{.Names}}\t{{.Status}}'
          "
          
      - name: 📝 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Infrastructure deployed to: \`${{ env.SERVER_HOST }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Access Points:" >> $GITHUB_STEP_SUMMARY
          echo "- **Traefik Dashboard**: https://traefik.glimmr.health" >> $GITHUB_STEP_SUMMARY
          echo "- **Authentik**: https://auth.glimmr.health" >> $GITHUB_STEP_SUMMARY
          echo "- **Airbyte**: https://airbyte.glimmr.health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify services are running" >> $GITHUB_STEP_SUMMARY
          echo "2. Check SSL certificates" >> $GITHUB_STEP_SUMMARY
          echo "3. Test authentication flows" >> $GITHUB_STEP_SUMMARY
