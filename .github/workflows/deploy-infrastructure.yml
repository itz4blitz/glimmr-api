name: 🏥 Deploy Glimmr Healthcare Pipeline

on:
  push:
    branches: [main]
    paths: ['infrastructure/glimmr-pipeline/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_secrets_regeneration:
        description: 'Force regeneration of secrets'
        required: false
        default: false
        type: boolean

env:
  SERVER_HOST: 104.243.44.8
  SERVER_USER: blitz
  DEPLOY_PATH: /opt/glimmr/pipeline

jobs:
  deploy:
    name: 🏥 Deploy Healthcare Pipeline
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🔑 Install 1Password CLI
        run: |
          curl -sSfLo op.zip https://cache.agilebits.com/dist/1P/op2/pkg/v2.20.0/op_linux_amd64_v2.20.0.zip
          unzip -o op.zip && sudo mv op /usr/local/bin/
          op --version
          
      - name: 🔍 Add Server to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: 🌐 Setup DNS Records
        run: |
          echo "🌐 Creating DNS records for healthcare pipeline..."

          # Create DNS records via Cloudflare API
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records" \
            -H "Authorization: Bearer ${{ secrets.CF_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data '{"type":"A","name":"airflow.glimmr.health","content":"${{ env.SERVER_HOST }}","ttl":1}' || echo "DNS record may already exist"

          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records" \
            -H "Authorization: Bearer ${{ secrets.CF_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data '{"type":"A","name":"api.glimmr.health","content":"${{ env.SERVER_HOST }}","ttl":1}' || echo "DNS record may already exist"

      - name: 🏥 Deploy Healthcare Pipeline
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          echo "🏥 Starting healthcare pipeline deployment..."

          # Create deployment directory on server
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}"

          # Copy pipeline configuration to server
          scp -r infrastructure/glimmr-pipeline/* ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/

          # Install 1Password CLI on server and authenticate
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "
          # Install 1Password CLI if not present
          if ! command -v op &> /dev/null; then
            curl -sSfLo op.zip https://cache.agilebits.com/dist/1P/op2/pkg/v2.20.0/op_linux_amd64_v2.20.0.zip
            unzip -o op.zip && sudo mv op /usr/local/bin/
          fi

          # Set up 1Password service account
          export OP_SERVICE_ACCOUNT_TOKEN='${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}'

          # Make deploy script executable and run deployment
          chmod +x ${{ env.DEPLOY_PATH }}/deploy.sh
          cd ${{ env.DEPLOY_PATH }}
          ./deploy.sh deploy
          "



      - name: 🔍 Verify Healthcare Pipeline Deployment
        run: |
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "
            echo '🏥 Checking healthcare pipeline status...'
            cd ${{ env.DEPLOY_PATH }}
            ./deploy.sh health
          "

      - name: 📊 Pipeline Health Summary
        run: |
          echo "## 🏥 Healthcare Pipeline Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Pipeline deployed to: \`${{ env.SERVER_HOST }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Access Points:" >> $GITHUB_STEP_SUMMARY
          echo "- **Airflow Dashboard**: https://airflow.glimmr.health" >> $GITHUB_STEP_SUMMARY
          echo "- **API Endpoints**: https://api.glimmr.health" >> $GITHUB_STEP_SUMMARY
          echo "- **Portainer**: https://portainer.glimmr.health:9000" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏥 Pipeline Components:" >> $GITHUB_STEP_SUMMARY
          echo "- **PostgreSQL**: Healthcare pricing database (300GB capacity)" >> $GITHUB_STEP_SUMMARY
          echo "- **Redis**: Queue management and caching (4GB)" >> $GITHUB_STEP_SUMMARY
          echo "- **Airflow**: Pipeline orchestration and scheduling" >> $GITHUB_STEP_SUMMARY
          echo "- **Stream Processors**: 10 concurrent file processors (5GB each)" >> $GITHUB_STEP_SUMMARY
          echo "- **FastAPI**: High-performance REST endpoints" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure Airflow DAGs for daily processing" >> $GITHUB_STEP_SUMMARY
          echo "2. Test API endpoints with sample queries" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor system performance and memory usage" >> $GITHUB_STEP_SUMMARY
          echo "4. Set up data quality monitoring" >> $GITHUB_STEP_SUMMARY
