name: üöÄ Main Deploy - Full Stack or Apps Only

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      deployment_type:
        description: 'What to deploy'
        required: true
        default: 'apps-only'
        type: choice
        options:
          - full-stack
          - apps-only
          - infrastructure-only
          - single-service
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'main'
        type: string
      services:
        description: 'Services to deploy (comma-separated for single-service)'
        required: false
        default: 'api,web'
        type: string
      force_rebuild:
        description: 'Force rebuild even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}
      
    - name: üîê Install 1Password CLI
      uses: 1password/install-cli-action@v1
      
    - name: üîë Load secrets from 1Password
      env:
        OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
      run: |
        # Load infrastructure IDs first
        VAULT_ID=$(op item get 'glimmr-infrastructure-ids' --field='onepassword_vault_id' --reveal)
        echo "VAULT_ID=${VAULT_ID}" >> $GITHUB_ENV
        echo "CLOUDFLARE_ACCOUNT_ID=$(op item get 'glimmr-infrastructure-ids' --field='cloudflare_account_id' --reveal)" >> $GITHUB_ENV
        echo "CLOUDFLARE_TUNNEL_ID=$(op item get 'glimmr-infrastructure-ids' --field='cloudflare_tunnel_id' --reveal)" >> $GITHUB_ENV
        
        # Load production secrets from 1Password using dynamic vault ID
        echo "POSTGRES_PASSWORD=$(op item get 'glimmr-postgres-master' --vault='${VAULT_ID}' --field='password' --reveal)" >> $GITHUB_ENV
        echo "REDIS_PASSWORD=$(op item get 'glimmr-redis-master' --vault='${VAULT_ID}' --field='password' --reveal)" >> $GITHUB_ENV
        echo "JWT_SECRET=$(op item get 'glimmr-api-secrets' --vault='${VAULT_ID}' --field='jwt_secret' --reveal)" >> $GITHUB_ENV
        echo "AIRFLOW_ADMIN_PASSWORD=$(op item get 'glimmr-airflow-admin' --vault='${VAULT_ID}' --field='password' --reveal)" >> $GITHUB_ENV
        
        # Additional service secrets
        echo "AUTHENTIK_POSTGRES_PASSWORD=$(op item get 'glimmr-authentik-postgres' --vault='${VAULT_ID}' --field='password' --reveal)" >> $GITHUB_ENV
        echo "AUTHENTIK_REDIS_PASSWORD=$(op item get 'glimmr-authentik-redis' --vault='${VAULT_ID}' --field='password' --reveal)" >> $GITHUB_ENV
        echo "AUTHENTIK_SECRET_KEY=$(op item get 'glimmr-authentik-secrets' --vault='${VAULT_ID}' --field='secret_key' --reveal)" >> $GITHUB_ENV
        echo "AIRFLOW_POSTGRES_PASSWORD=$(op item get 'glimmr-airflow-postgres' --vault='${VAULT_ID}' --field='password' --reveal)" >> $GITHUB_ENV
        echo "AIRFLOW_FERNET_KEY=$(op item get 'glimmr-airflow-secrets' --vault='${VAULT_ID}' --field='fernet_key' --reveal)" >> $GITHUB_ENV
        echo "CLOUDFLARE_TUNNEL_TOKEN=$(op item get 'glimmr-cloudflare' --vault='${VAULT_ID}' --field='tunnel_token' --reveal)" >> $GITHUB_ENV
        echo "CLOUDFLARE_API_TOKEN=$(op item get 'glimmr-cloudflare' --vault='${VAULT_ID}' --field='api_token' --reveal)" >> $GITHUB_ENV
        
        # SSH deployment credentials
        SSH_ITEM_ID=$(op item get 'glimmr-infrastructure-ids' --field='ssh_credentials_id' --reveal 2>/dev/null || echo 'ifrfmw7jojlbl7p4tflhcmrhku')
        SSH_KEY=$(op item get "${SSH_ITEM_ID}" --vault='${VAULT_ID}' --field='private_key' --reveal | sed 's/^"//;s/"$//')
        echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
        echo "$SSH_KEY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "SSH_HOST=$(op item get "${SSH_ITEM_ID}" --vault='${VAULT_ID}' --field='host' --reveal)" >> $GITHUB_ENV
        echo "SSH_USER=$(op item get "${SSH_ITEM_ID}" --vault='${VAULT_ID}' --field='username' --reveal)" >> $GITHUB_ENV
        echo "SSH_PORT=$(op item get "${SSH_ITEM_ID}" --vault='${VAULT_ID}' --field='port' --reveal)" >> $GITHUB_ENV
    
    - name: üß† Determine deployment strategy
      id: strategy
      run: |
        # Set deployment type
        DEPLOYMENT_TYPE="${{ github.event.inputs.deployment_type || 'apps-only' }}"
        SERVICES="${{ github.event.inputs.services || 'api,web' }}"
        FORCE_REBUILD="${{ github.event.inputs.force_rebuild || 'false' }}"
        
        echo "deployment-type=${DEPLOYMENT_TYPE}" >> $GITHUB_OUTPUT
        echo "services=${SERVICES}" >> $GITHUB_OUTPUT
        echo "force-rebuild=${FORCE_REBUILD}" >> $GITHUB_OUTPUT
        
        # Determine what to build
        BUILD_API="false"
        BUILD_WEB="false"
        DEPLOY_INFRASTRUCTURE="false"
        
        case "${DEPLOYMENT_TYPE}" in
          "full-stack")
            BUILD_API="true"
            BUILD_WEB="true"
            DEPLOY_INFRASTRUCTURE="true"
            ;;
          "apps-only")
            BUILD_API="true"
            BUILD_WEB="true"
            ;;
          "infrastructure-only")
            DEPLOY_INFRASTRUCTURE="true"
            ;;
          "single-service")
            if [[ "${SERVICES}" == *"api"* ]]; then BUILD_API="true"; fi
            if [[ "${SERVICES}" == *"web"* ]]; then BUILD_WEB="true"; fi
            if [[ "${SERVICES}" == *"postgres"* ]] || [[ "${SERVICES}" == *"redis"* ]] || [[ "${SERVICES}" == *"minio"* ]] || [[ "${SERVICES}" == *"authentik"* ]] || [[ "${SERVICES}" == *"airflow"* ]]; then
              DEPLOY_INFRASTRUCTURE="true"
            fi
            ;;
        esac
        
        echo "build-api=${BUILD_API}" >> $GITHUB_OUTPUT
        echo "build-web=${BUILD_WEB}" >> $GITHUB_OUTPUT
        echo "deploy-infrastructure=${DEPLOY_INFRASTRUCTURE}" >> $GITHUB_OUTPUT
        
        echo "üöÄ Deployment Strategy:"
        echo "  Type: ${DEPLOYMENT_TYPE}"
        echo "  Services: ${SERVICES}"
        echo "  Build API: ${BUILD_API}"
        echo "  Build Web: ${BUILD_WEB}"
        echo "  Deploy Infrastructure: ${DEPLOY_INFRASTRUCTURE}"
        echo "  Force Rebuild: ${FORCE_REBUILD}"
    
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîê Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üì¶ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: üîç Calculate content hashes for smart caching
      id: hashes
      run: |
        # Calculate hash for API dependencies and source
        API_DEPS_HASH=$(sha256sum package.json pnpm-lock.yaml apps/api/package.json | sha256sum | cut -d' ' -f1 | cut -c1-12)
        API_SOURCE_HASH=$(find apps/api/src -type f -name "*.ts" -o -name "*.js" -o -name "*.json" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1 | cut -c1-12)
        echo "api-deps-hash=${API_DEPS_HASH}" >> $GITHUB_OUTPUT
        echo "api-source-hash=${API_SOURCE_HASH}" >> $GITHUB_OUTPUT
        
        # Calculate hash for Web dependencies and source  
        WEB_DEPS_HASH=$(sha256sum package.json pnpm-lock.yaml apps/web/package.json | sha256sum | cut -d' ' -f1 | cut -c1-12)
        WEB_SOURCE_HASH=$(find apps/web/src -type f -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o -name "*.json" -o -name "*.css" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1 | cut -c1-12)
        echo "web-deps-hash=${WEB_DEPS_HASH}" >> $GITHUB_OUTPUT
        echo "web-source-hash=${WEB_SOURCE_HASH}" >> $GITHUB_OUTPUT
        
        # Combined hashes for tagging (12+12+1 = 25 chars, well under Docker limit)
        echo "api-combined-hash=${API_DEPS_HASH}-${API_SOURCE_HASH}" >> $GITHUB_OUTPUT
        echo "web-combined-hash=${WEB_DEPS_HASH}-${WEB_SOURCE_HASH}" >> $GITHUB_OUTPUT
          
    - name: üèóÔ∏è Build and push API image
      if: steps.strategy.outputs.build-api == 'true'
      uses: docker/build-push-action@v5
      timeout-minutes: 20
      with:
        context: .
        file: apps/api/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ steps.meta.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ steps.hashes.outputs.api-combined-hash }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha,scope=api
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ steps.hashes.outputs.api-combined-hash }}
        cache-to: type=gha,mode=max,scope=api
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        provenance: false
        sbom: false
        
    - name: üèóÔ∏è Build and push Web image
      if: steps.strategy.outputs.build-web == 'true'
      uses: docker/build-push-action@v5
      timeout-minutes: 15
      with:
        context: .
        file: apps/web/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ steps.meta.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ steps.hashes.outputs.web-combined-hash }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha,scope=web
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:latest
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ steps.hashes.outputs.web-combined-hash }}
        cache-to: type=gha,mode=max,scope=web
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        provenance: false
        sbom: false
        
        
    - name: üìù Create minimal deployment files
      run: |
        # Create minimal docker-compose for production (no source code!)
        cat > docker-compose.prod.yml << EOF
        services:
          postgres:
            image: postgres:16-alpine
            container_name: glimmr-postgres
            restart: unless-stopped
            environment:
              POSTGRES_PASSWORD: \${POSTGRES_PASSWORD}
              POSTGRES_DB: glimmr_prod
              POSTGRES_USER: postgres
            volumes:
              - postgres_data:/var/lib/postgresql/data
            ports:
              - "127.0.0.1:5432:5432"
              
          redis:
            image: redis:7-alpine
            container_name: glimmr-redis
            restart: unless-stopped
            command: redis-server --requirepass \${REDIS_PASSWORD}
            volumes:
              - redis_data:/data
            ports:
              - "127.0.0.1:6379:6379"
              
          minio:
            image: minio/minio:latest
            container_name: glimmr-minio
            restart: unless-stopped
            command: server /data --console-address ":9001"
            environment:
              MINIO_ROOT_USER: \${MINIO_ROOT_USER}
              MINIO_ROOT_PASSWORD: \${MINIO_ROOT_PASSWORD}
            volumes:
              - minio_data:/data
            ports:
              - "127.0.0.1:9000:9000"
              - "127.0.0.1:9001:9001"
              
          api:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ steps.hashes.outputs.api-combined-hash }}
            container_name: glimmr-api
            restart: unless-stopped
            environment:
              DATABASE_URL: postgresql://postgres:\${POSTGRES_PASSWORD}@postgres:5432/glimmr_prod
              REDIS_URL: redis://:\${REDIS_PASSWORD}@redis:6379
              JWT_SECRET: \${JWT_SECRET}
            depends_on:
              - postgres
              - redis
              - minio
            ports:
              - "127.0.0.1:3000:3000"
              
          web:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ steps.hashes.outputs.web-combined-hash }}
            container_name: glimmr-web
            restart: unless-stopped
            depends_on:
              - api
            ports:
              - "127.0.0.1:5174:5174"
              
          portainer:
            image: portainer/portainer-ce:latest
            container_name: glimmr-portainer
            restart: unless-stopped
            volumes:
              - /var/run/docker.sock:/var/run/docker.sock:ro
              - portainer_data:/data
            ports:
              - "127.0.0.1:9090:9000"
              
          cloudflare-tunnel:
            image: cloudflare/cloudflared:latest
            container_name: glimmr-cloudflare-tunnel
            restart: unless-stopped
            command: tunnel --no-autoupdate run --token \${CLOUDFLARE_TUNNEL_TOKEN}
            depends_on:
              - api
              - web
              - portainer
              
        volumes:
          postgres_data:
          redis_data:
          minio_data:
          portainer_data:
        EOF
        
        # Create minimal .env file
        cat > .env.prod << EOF
        POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        REDIS_PASSWORD=${REDIS_PASSWORD}
        JWT_SECRET=${JWT_SECRET}
        CLOUDFLARE_TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
        MINIO_ROOT_USER=glimmr-prod
        MINIO_ROOT_PASSWORD=${POSTGRES_PASSWORD}
        EOF
        
    - name: üì¶ Upload minimal deployment files
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        port: ${{ env.SSH_PORT }}
        source: "docker-compose.prod.yml,.env.prod"
        target: "/opt/glimmr/"
        
    - name: üöÄ Deploy services
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        port: ${{ env.SSH_PORT }}
        script: |
          cd /opt/glimmr
          
          # Authenticate with GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull and deploy based on strategy
          case "${{ steps.strategy.outputs.deployment-type }}" in
            "full-stack")
              echo "üöÄ Full stack deployment"
              docker compose -f docker-compose.prod.yml --env-file .env.prod down || true
              docker compose -f docker-compose.prod.yml --env-file .env.prod pull
              docker compose -f docker-compose.prod.yml --env-file .env.prod up -d
              ;;
            "apps-only"|*)
              echo "üì± Apps-only deployment"
              docker compose -f docker-compose.prod.yml --env-file .env.prod pull api web || true
              docker compose -f docker-compose.prod.yml --env-file .env.prod stop api web || true
              docker compose -f docker-compose.prod.yml --env-file .env.prod up -d api web
              
              # Start infrastructure if not running
              docker compose -f docker-compose.prod.yml --env-file .env.prod up -d postgres redis minio portainer cloudflare-tunnel
              ;;
          esac
          
          # Wait for services
          echo "‚è≥ Waiting for services to be ready..."
          sleep 30
          
          # Show status
          echo "üìä Service Status:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          # Configure Cloudflare tunnel ingress rules
          echo "üåê Configuring Cloudflare tunnel ingress rules..."
          if [ ! -z "$CLOUDFLARE_API_TOKEN" ] && [ ! -z "$CLOUDFLARE_ACCOUNT_ID" ] && [ ! -z "$CLOUDFLARE_TUNNEL_ID" ]; then
            # Configure ingress rules via API using environment variables
            curl -X PUT "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/cfd_tunnel/$CLOUDFLARE_TUNNEL_ID/configurations" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{
                "config": {
                  "ingress": [
                    {
                      "hostname": "api.glimmr.health",
                      "service": "http://localhost:3000"
                    },
                    {
                      "hostname": "app.glimmr.health", 
                      "service": "http://localhost:5174"
                    },
                    {
                      "hostname": "portainer.glimmr.health",
                      "service": "http://localhost:9090"
                    },
                    {
                      "hostname": "minio.glimmr.health",
                      "service": "http://localhost:9001"
                    },
                    {
                      "service": "http_status:404"
                    }
                  ]
                }
              }' || echo "‚ö†Ô∏è Cloudflare tunnel configuration failed"
          else
            echo "‚ö†Ô∏è Cloudflare credentials not set, skipping tunnel configuration"
          fi
          
          # Basic health check
          echo "üîç Basic health checks:"
          curl -f http://localhost:3000/health || echo "‚ö†Ô∏è API health check failed"
          curl -f http://localhost:5174 || echo "‚ö†Ô∏è Web health check failed"
          curl -f http://localhost:9090 || echo "‚ö†Ô∏è Portainer health check failed"
          
          echo "‚úÖ Deployment completed!"
