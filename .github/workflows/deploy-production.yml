name: 🚀 Deploy Glimmr to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Install 1Password CLI
      uses: 1password/install-cli-action@v1
      
    - name: 🔑 Load secrets from 1Password
      env:
        OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
      run: |
        # Load production secrets and set as outputs
        echo "POSTGRES_PASSWORD=$(op item get 'glimmr-postgres-master' --vault='Glimmr-production' --field='password')" >> $GITHUB_ENV
        echo "REDIS_PASSWORD=$(op item get 'glimmr-redis-master' --vault='Glimmr-production' --field='password')" >> $GITHUB_ENV
        echo "JWT_SECRET=$(op item get 'glimmr-api-secrets' --vault='Glimmr-production' --field='jwt_secret')" >> $GITHUB_ENV
        echo "AIRFLOW_ADMIN_PASSWORD=$(op item get 'glimmr-airflow-admin' --vault='Glimmr-production' --field='password')" >> $GITHUB_ENV
        
        # SSH deployment credentials
        echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
        op item get 'glimmr-deployment-ssh' --vault='Glimmr-production' --field='private_key' >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "SSH_HOST=$(op item get 'glimmr-deployment-ssh' --vault='Glimmr-production' --field='host')" >> $GITHUB_ENV
        echo "SSH_USER=$(op item get 'glimmr-deployment-ssh' --vault='Glimmr-production' --field='username')" >> $GITHUB_ENV
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📦 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        dockerfile: apps/api/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🏗️ Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        dockerfile: apps/web/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
        
    - name: 📝 Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy infrastructure files
        cp -r infrastructure deployment/
        cp docker-compose.production.yml deployment/
        cp setup.sh deployment/
        
        # Create production environment file
        cat > deployment/.env.production << EOF
        # Production Environment - Generated by GitHub Actions
        ENVIRONMENT=production
        
        # Database
        POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        REDIS_PASSWORD=${REDIS_PASSWORD}
        
        # API
        JWT_SECRET=${JWT_SECRET}
        
        # Airflow
        AIRFLOW_ADMIN_PASSWORD=${AIRFLOW_ADMIN_PASSWORD}
        
        # Container Registry
        REGISTRY=${REGISTRY}
        IMAGE_NAME=${IMAGE_NAME}
        IMAGE_TAG=${{ steps.meta.outputs.version }}
        EOF
        
        # Create deployment script
        cat > deployment/deploy.sh << 'EOF'
        #!/bin/bash
        set -euo pipefail
        
        echo "🚀 Deploying Glimmr to production..."
        
        # Load environment
        source .env.production
        
        # Pull latest images
        docker-compose -f docker-compose.production.yml pull
        
        # Stop existing services
        docker-compose -f docker-compose.production.yml down
        
        # Start services
        docker-compose -f docker-compose.production.yml up -d
        
        # Wait for health checks
        ./wait-for-health.sh
        
        echo "✅ Deployment completed successfully!"
        EOF
        
        chmod +x deployment/deploy.sh
        
        # Create archive
        tar -czf deployment.tar.gz -C deployment .
        
    - name: 🚀 Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          # Create deployment directory
          mkdir -p /opt/glimmr
          cd /opt/glimmr
          
          # Backup current deployment
          if [ -d "current" ]; then
            mv current backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Create new deployment directory
          mkdir -p current
          
    - name: 📦 Upload deployment package
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        port: 22
        source: "deployment.tar.gz"
        target: "/opt/glimmr/current/"
        
    - name: 🎯 Execute deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd /opt/glimmr/current
          
          # Extract deployment package
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz
          
          # Make scripts executable
          chmod +x *.sh
          
          # Run deployment
          ./deploy.sh
          
    - name: 🔍 Health check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd /opt/glimmr/current
          
          # Wait for services to be healthy
          timeout 300 ./wait-for-health.sh
          
          # Show final status
          ./show-status.sh
          
    - name: 📢 Notify deployment success
      if: success()
      run: |
        echo "🎉 Glimmr successfully deployed to production!"
        echo "🔗 Access the platform at: https://glimmr.premierstudio.ai"
        
    - name: 📢 Notify deployment failure
      if: failure()
      run: |
        echo "❌ Deployment failed. Check logs for details."
        exit 1
