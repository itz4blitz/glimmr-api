name: üöÄ Main Deploy - Full Stack or Apps Only

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      deployment_type:
        description: 'What to deploy'
        required: true
        default: 'apps-only'
        type: choice
        options:
          - full-stack
          - apps-only
          - infrastructure-only
          - single-service
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'main'
        type: string
      services:
        description: 'Services to deploy (comma-separated for single-service)'
        required: false
        default: 'api,web'
        type: string
      force_rebuild:
        description: 'Force rebuild even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}
      
    - name: üîê Install 1Password CLI
      uses: 1password/install-cli-action@v1
      
    - name: üîë Load secrets from 1Password
      env:
        OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
      run: |
        # Load production secrets from 1Password
        echo "POSTGRES_PASSWORD=$(op item get 'glimmr-postgres-master' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='password' --reveal)" >> $GITHUB_ENV
        echo "REDIS_PASSWORD=$(op item get 'glimmr-redis-master' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='password' --reveal)" >> $GITHUB_ENV
        echo "JWT_SECRET=$(op item get 'glimmr-api-secrets' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='jwt_secret' --reveal)" >> $GITHUB_ENV
        echo "AIRFLOW_ADMIN_PASSWORD=$(op item get 'glimmr-airflow-admin' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='password' --reveal)" >> $GITHUB_ENV
        
        # Additional service secrets
        echo "AUTHENTIK_POSTGRES_PASSWORD=$(op item get 'glimmr-authentik-postgres' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='password' --reveal)" >> $GITHUB_ENV
        echo "AUTHENTIK_REDIS_PASSWORD=$(op item get 'glimmr-authentik-redis' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='password' --reveal)" >> $GITHUB_ENV
        echo "AUTHENTIK_SECRET_KEY=$(op item get 'glimmr-authentik-secrets' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='secret_key' --reveal)" >> $GITHUB_ENV
        echo "AIRFLOW_POSTGRES_PASSWORD=$(op item get 'glimmr-airflow-postgres' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='password' --reveal)" >> $GITHUB_ENV
        echo "AIRFLOW_FERNET_KEY=$(op item get 'glimmr-airflow-secrets' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='fernet_key' --reveal)" >> $GITHUB_ENV
        echo "CLOUDFLARE_TUNNEL_TOKEN=$(op item get 'glimmr-cloudflare' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='tunnel_token' --reveal)" >> $GITHUB_ENV
        
        # SSH deployment credentials
        SSH_KEY=$(op item get 'ifrfmw7jojlbl7p4tflhcmrhku' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='private_key' --reveal | sed 's/^"//;s/"$//')
        echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
        echo "$SSH_KEY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "SSH_HOST=$(op item get 'ifrfmw7jojlbl7p4tflhcmrhku' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='host' --reveal)" >> $GITHUB_ENV
        echo "SSH_USER=$(op item get 'ifrfmw7jojlbl7p4tflhcmrhku' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='username' --reveal)" >> $GITHUB_ENV
        echo "SSH_PORT=$(op item get 'ifrfmw7jojlbl7p4tflhcmrhku' --vault='ix6on2g66agy3lj42z72y4rmqu' --field='port' --reveal)" >> $GITHUB_ENV
    
    - name: üß† Determine deployment strategy
      id: strategy
      run: |
        # Set deployment type
        DEPLOYMENT_TYPE="${{ github.event.inputs.deployment_type || 'apps-only' }}"
        SERVICES="${{ github.event.inputs.services || 'api,web' }}"
        FORCE_REBUILD="${{ github.event.inputs.force_rebuild || 'false' }}"
        
        echo "deployment-type=${DEPLOYMENT_TYPE}" >> $GITHUB_OUTPUT
        echo "services=${SERVICES}" >> $GITHUB_OUTPUT
        echo "force-rebuild=${FORCE_REBUILD}" >> $GITHUB_OUTPUT
        
        # Determine what to build
        BUILD_API="false"
        BUILD_WEB="false"
        DEPLOY_INFRASTRUCTURE="false"
        
        case "${DEPLOYMENT_TYPE}" in
          "full-stack")
            BUILD_API="true"
            BUILD_WEB="true"
            DEPLOY_INFRASTRUCTURE="true"
            ;;
          "apps-only")
            BUILD_API="true"
            BUILD_WEB="true"
            ;;
          "infrastructure-only")
            DEPLOY_INFRASTRUCTURE="true"
            ;;
          "single-service")
            if [[ "${SERVICES}" == *"api"* ]]; then BUILD_API="true"; fi
            if [[ "${SERVICES}" == *"web"* ]]; then BUILD_WEB="true"; fi
            if [[ "${SERVICES}" == *"postgres"* ]] || [[ "${SERVICES}" == *"redis"* ]] || [[ "${SERVICES}" == *"minio"* ]] || [[ "${SERVICES}" == *"authentik"* ]] || [[ "${SERVICES}" == *"airflow"* ]]; then
              DEPLOY_INFRASTRUCTURE="true"
            fi
            ;;
        esac
        
        echo "build-api=${BUILD_API}" >> $GITHUB_OUTPUT
        echo "build-web=${BUILD_WEB}" >> $GITHUB_OUTPUT
        echo "deploy-infrastructure=${DEPLOY_INFRASTRUCTURE}" >> $GITHUB_OUTPUT
        
        echo "üöÄ Deployment Strategy:"
        echo "  Type: ${DEPLOYMENT_TYPE}"
        echo "  Services: ${SERVICES}"
        echo "  Build API: ${BUILD_API}"
        echo "  Build Web: ${BUILD_WEB}"
        echo "  Deploy Infrastructure: ${DEPLOY_INFRASTRUCTURE}"
        echo "  Force Rebuild: ${FORCE_REBUILD}"
    
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîê Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üì¶ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: üîç Calculate content hashes for smart caching
      id: hashes
      run: |
        # Calculate hash for API dependencies and source
        API_DEPS_HASH=$(sha256sum package.json pnpm-lock.yaml apps/api/package.json | sha256sum | cut -d' ' -f1 | cut -c1-12)
        API_SOURCE_HASH=$(find apps/api/src -type f -name "*.ts" -o -name "*.js" -o -name "*.json" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1 | cut -c1-12)
        echo "api-deps-hash=${API_DEPS_HASH}" >> $GITHUB_OUTPUT
        echo "api-source-hash=${API_SOURCE_HASH}" >> $GITHUB_OUTPUT
        
        # Calculate hash for Web dependencies and source  
        WEB_DEPS_HASH=$(sha256sum package.json pnpm-lock.yaml apps/web/package.json | sha256sum | cut -d' ' -f1 | cut -c1-12)
        WEB_SOURCE_HASH=$(find apps/web/src -type f -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o -name "*.json" -o -name "*.css" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1 | cut -c1-12)
        echo "web-deps-hash=${WEB_DEPS_HASH}" >> $GITHUB_OUTPUT
        echo "web-source-hash=${WEB_SOURCE_HASH}" >> $GITHUB_OUTPUT
        
        # Combined hashes for tagging (12+12+1 = 25 chars, well under Docker limit)
        echo "api-combined-hash=${API_DEPS_HASH}-${API_SOURCE_HASH}" >> $GITHUB_OUTPUT
        echo "web-combined-hash=${WEB_DEPS_HASH}-${WEB_SOURCE_HASH}" >> $GITHUB_OUTPUT
          
    - name: üèóÔ∏è Build and push API image
      if: steps.strategy.outputs.build-api == 'true'
      uses: docker/build-push-action@v5
      timeout-minutes: 20
      with:
        context: .
        file: apps/api/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ steps.meta.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ steps.hashes.outputs.api-combined-hash }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha,scope=api
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ steps.hashes.outputs.api-combined-hash }}
        cache-to: type=gha,mode=max,scope=api
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        provenance: false
        sbom: false
        
    - name: üèóÔ∏è Build and push Web image
      if: steps.strategy.outputs.build-web == 'true'
      uses: docker/build-push-action@v5
      timeout-minutes: 15
      with:
        context: .
        file: apps/web/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ steps.meta.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ steps.hashes.outputs.web-combined-hash }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha,scope=web
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:latest
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ steps.hashes.outputs.web-combined-hash }}
        cache-to: type=gha,mode=max,scope=web
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        provenance: false
        sbom: false
        
        
    - name: üìù Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy infrastructure files
        cp -r infrastructure deployment/
        cp docker-compose.production.yml deployment/
        cp wait-for-health.sh deployment/
        cp show-status.sh deployment/
        cp setup.sh deployment/ 2>/dev/null || true
        
        # Create production environment file
        cat > deployment/.env.production << EOF
        # Production Environment - Generated by GitHub Actions
        ENVIRONMENT=production
        
        # Database
        POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        GLIMMR_API_PASSWORD=${POSTGRES_PASSWORD}
        REDIS_PASSWORD=${REDIS_PASSWORD}
        
        # API
        JWT_SECRET=${JWT_SECRET}
        
        # Airflow
        AIRFLOW_ADMIN_PASSWORD=${AIRFLOW_ADMIN_PASSWORD}
        AIRFLOW_POSTGRES_PASSWORD=${AIRFLOW_POSTGRES_PASSWORD}
        AIRFLOW_FERNET_KEY=${AIRFLOW_FERNET_KEY}
        
        # Authentik
        AUTHENTIK_POSTGRES_PASSWORD=${AUTHENTIK_POSTGRES_PASSWORD}
        AUTHENTIK_REDIS_PASSWORD=${AUTHENTIK_REDIS_PASSWORD}
        AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
        
        # Cloudflare
        CLOUDFLARE_TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
        
        # MinIO Storage
        MINIO_ROOT_USER=glimmr-prod
        MINIO_ROOT_PASSWORD=${POSTGRES_PASSWORD}
        
        # Container Registry
        REGISTRY=${REGISTRY}
        IMAGE_NAME=${IMAGE_NAME}
        IMAGE_TAG=${{ steps.meta.outputs.version }}
        API_IMAGE_TAG=${{ steps.hashes.outputs.api-combined-hash }}
        WEB_IMAGE_TAG=${{ steps.hashes.outputs.web-combined-hash }}
        
        # Domain (can be overridden)
        DOMAIN=glimmr.health
        
        # Deployment Strategy
        DEPLOYMENT_TYPE=${{ steps.strategy.outputs.deployment-type }}
        SERVICES=${{ steps.strategy.outputs.services }}
        BUILD_API=${{ steps.strategy.outputs.build-api }}
        BUILD_WEB=${{ steps.strategy.outputs.build-web }}
        DEPLOY_INFRASTRUCTURE=${{ steps.strategy.outputs.deploy-infrastructure }}
        FORCE_REBUILD=${{ steps.strategy.outputs.force-rebuild }}
        EOF
        
        # Create smart deployment script
        cat > deployment/deploy.sh << 'EOF'
        #!/bin/bash
        set -euo pipefail
        
        echo "üöÄ Starting Glimmr deployment..."
        
        # Load environment
        source .env.production
        
        # Check if Docker is available
        if ! command -v docker &> /dev/null; then
            echo "‚ùå Docker is not installed. Please install Docker first."
            exit 1
        fi
        
        # Use docker compose (new) or docker-compose (legacy)
        COMPOSE_CMD="docker compose"
        if ! docker compose version &> /dev/null; then
            if command -v docker-compose &> /dev/null; then
                COMPOSE_CMD="docker-compose"
            else
                echo "‚ùå Neither 'docker compose' nor 'docker-compose' is available."
                exit 1
            fi
        fi
        
        echo "üê≥ Using Docker Compose command: $COMPOSE_CMD"
        echo "üìã Deployment Type: ${DEPLOYMENT_TYPE:-apps-only}"
        echo "üéØ Target Services: ${SERVICES:-api,web}"
        
        # Function to deploy specific services
        deploy_services() {
            local service_list="$1"
            local action="$2"
            
            if [ "$service_list" = "all" ]; then
                echo "üîÑ ${action} all services..."
                $COMPOSE_CMD -f docker-compose.production.yml $action
            else
                echo "üîÑ ${action} services: $service_list"
                IFS=',' read -ra SERVICES_ARRAY <<< "$service_list"
                for service in "${SERVICES_ARRAY[@]}"; do
                    service=$(echo "$service" | xargs) # trim whitespace
                    echo "  ‚Üí ${action} $service"
                    $COMPOSE_CMD -f docker-compose.production.yml $action "$service" || echo "‚ö†Ô∏è Service $service not found or failed"
                done
            fi
        }
        
        # Smart deployment logic
        case "${DEPLOYMENT_TYPE:-apps-only}" in
            "full-stack")
                echo "üöÄ Full stack deployment"
                $COMPOSE_CMD -f docker-compose.production.yml pull
                $COMPOSE_CMD -f docker-compose.production.yml down
                $COMPOSE_CMD -f docker-compose.production.yml up -d
                ;;
            "apps-only")
                echo "üì± Application services only"
                # Only restart app containers, keep infrastructure running
                $COMPOSE_CMD -f docker-compose.production.yml pull api web
                $COMPOSE_CMD -f docker-compose.production.yml stop api web
                $COMPOSE_CMD -f docker-compose.production.yml up -d api web
                ;;
            "infrastructure-only")
                echo "üèóÔ∏è Infrastructure services only"
                # Deploy infrastructure but don't touch apps
                INFRA_SERVICES="postgres,redis,minio,minio-setup,authentik-postgres,authentik-redis,authentik-server,authentik-worker,airflow-postgres,airflow-webserver,airflow-scheduler,cloudflare-tunnel"
                deploy_services "$INFRA_SERVICES" "pull"
                deploy_services "$INFRA_SERVICES" "up -d"
                ;;
            "single-service")
                echo "üéØ Single service deployment"
                deploy_services "${SERVICES:-api,web}" "pull"
                deploy_services "${SERVICES:-api,web}" "stop"
                deploy_services "${SERVICES:-api,web}" "up -d"
                ;;
            *)
                echo "‚ö†Ô∏è Unknown deployment type, defaulting to apps-only"
                $COMPOSE_CMD -f docker-compose.production.yml pull api web
                $COMPOSE_CMD -f docker-compose.production.yml stop api web
                $COMPOSE_CMD -f docker-compose.production.yml up -d api web
                ;;
        esac
        
        # Health checks
        if [ -f "./wait-for-health.sh" ]; then
            echo "üîç Running health checks..."
            ./wait-for-health.sh
        else
            echo "‚ö†Ô∏è Health check script not found, waiting 30 seconds..."
            sleep 30
        fi
        
        echo "‚úÖ Deployment completed successfully!"
        echo "üìä Final status:"
        $COMPOSE_CMD -f docker-compose.production.yml ps
        EOF
        
        chmod +x deployment/deploy.sh
        
        # Create archive
        tar -czf deployment.tar.gz -C deployment .
        
    - name: üöÄ Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        port: ${{ env.SSH_PORT }}
        script: |
          # Create deployment directory
          mkdir -p /opt/glimmr
          cd /opt/glimmr
          
          # Backup current deployment
          if [ -d "current" ]; then
            mv current backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Create new deployment directory
          mkdir -p current
          
    - name: üì¶ Upload deployment package
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        port: ${{ env.SSH_PORT }}
        source: "deployment.tar.gz"
        target: "/opt/glimmr/current/"
        
    - name: üéØ Execute deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        port: ${{ env.SSH_PORT }}
        script: |
          cd /opt/glimmr/current
          
          # Extract deployment package
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz
          
          # Make scripts executable
          chmod +x *.sh
          
          # Run deployment
          ./deploy.sh
          
    - name: üîç Health check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        port: ${{ env.SSH_PORT }}
        script: |
          cd /opt/glimmr/current
          
          # Wait for services to be healthy
          timeout 300 ./wait-for-health.sh
          
          # Show final status
          ./show-status.sh
          
    - name: üì¢ Notify deployment success
      if: success()
      run: |
        echo "üéâ Glimmr successfully deployed to production!"
        echo "üîó Access the platform at: https://glimmr.premierstudio.ai"
        
    - name: üì¢ Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed. Check logs for details."
        exit 1
