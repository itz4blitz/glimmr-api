name: glimmr

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: glimmr-postgres
    environment:
      POSTGRES_DB: glimmr_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: glimmr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: glimmr-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Inbucket for email testing
  inbucket:
    image: inbucket/inbucket:latest
    container_name: glimmr-inbucket
    ports:
      - "2500:2500"  # SMTP port
      - "8025:9000"  # Web UI port (map internal 9000 to external 8025)
      - "1100:1100"  # POP3 port
    environment:
      INBUCKET_SMTP_DOMAIN: localhost
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Client for bucket creation
  minio-setup:
    image: minio/mc:latest
    container_name: glimmr-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      mc mb myminio/glimmr-files --ignore-existing;
      mc policy set public myminio/glimmr-files;
      echo 'MinIO setup complete';
      "

  # Glimmr API
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.dev
    container_name: glimmr-api
    environment:
      NODE_ENV: development
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: glimmr_dev
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_SSL: false
      DATABASE_SYNCHRONIZE: true
      DATABASE_LOGGING: true
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      JWT_SECRET: dev-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
      API_PORT: 3000
      API_PREFIX: api/v1
      API_RATE_LIMIT: 1000
      LOG_LEVEL: info
      BULL_REDIS_HOST: redis
      BULL_REDIS_PORT: 6379
      CACHE_TTL: 3600
      CACHE_MAX_ITEMS: 1000
      CORS_ORIGIN: "*"
      CORS_CREDENTIALS: "true"
      SWAGGER_ENABLED: "true"
      SWAGGER_PATH: api/docs
      MAX_FILE_SIZE: 10485760
      UPLOAD_DEST: ./uploads
      THROTTLE_TTL: 60
      THROTTLE_LIMIT: 100
      HEALTH_CHECK_ENABLED: "true"
      HEALTH_CHECK_DATABASE: "true"
      HEALTH_CHECK_REDIS: "true"
      APP_BOOTSTRAP_ENABLED: "true"
      BULL_BOARD_ENABLED: "true"
      BULL_BOARD_BASE_PATH: /admin/queues
      BULL_BOARD_AUTH_ENABLED: "false"
      BULL_BOARD_CORS_ENABLED: "true"
      BULL_BOARD_CORS_ORIGIN: "*"
      BULL_BOARD_CORS_CREDENTIALS: "true"
      # Storage Configuration - MinIO for Development (S3-compatible)
      STORAGE_TYPE: spaces
      STORAGE_LOCAL_PATH: ./storage
      FILE_STORAGE_PATH: ./storage/pra-files
      # MinIO Configuration (Development Only)
      STORAGE_SPACES_ENDPOINT: http://minio:9000
      STORAGE_SPACES_BUCKET: glimmr-files
      STORAGE_SPACES_ACCESS_KEY_ID: minioadmin
      STORAGE_SPACES_SECRET_ACCESS_KEY: minioadmin123
      STORAGE_SPACES_REGION: us-east-1
      # Email Configuration - Inbucket for Development
      EMAIL_HOST: inbucket
      EMAIL_PORT: 2500
      EMAIL_SECURE: false
      EMAIL_FROM: noreply@glimmr.local
      EMAIL_FROM_NAME: Glimmr API
    ports:
      - "3000:3000"
    volumes:
      - ./apps/api/src:/app/apps/api/src
      - ./apps/api/uploads:/app/apps/api/uploads
      - ./apps/api/temp:/app/apps/api/temp
      - ./storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Glimmr Web App (React UI)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile.dev
    container_name: glimmr-web
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3000/api/v1
    ports:
      - "5174:5174"
    volumes:
      - ./apps/web/src:/app/apps/web/src
      - ./apps/web/public:/app/apps/web/public
      - ./apps/web/index.html:/app/apps/web/index.html
      - ./apps/web/package.json:/app/apps/web/package.json
      - ./apps/web/vite.config.ts:/app/apps/web/vite.config.ts
      - ./apps/web/tailwind.config.js:/app/apps/web/tailwind.config.js
      - ./apps/web/postcss.config.js:/app/apps/web/postcss.config.js
      - ./apps/web/tsconfig.json:/app/apps/web/tsconfig.json
      - ./apps/web/tsconfig.app.json:/app/apps/web/tsconfig.app.json
      - ./apps/web/tsconfig.node.json:/app/apps/web/tsconfig.node.json
      - ./apps/web/components.json:/app/apps/web/components.json
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5174"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  default:
    name: glimmr-network
