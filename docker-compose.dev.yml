name: glimmr

services:
  # =============================================================================
  # DATABASE LAYER
  # =============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: glimmr-postgres
    environment:
      POSTGRES_DB: glimmr_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # Optimize for M3 Mac Studio
      POSTGRES_SHARED_BUFFERS: 512MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1536MB
      POSTGRES_WORK_MEM: 16MB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # CACHE LAYER
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: glimmr-redis
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --save 60 1000
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 768M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # STORAGE LAYER
  # =============================================================================
  minio:
    image: minio/minio:latest
    container_name: glimmr-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      # Optimize for M3 performance
      MINIO_CACHE_DRIVES: /tmp/cache
      MINIO_CACHE_QUOTA: 80
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    volumes:
      - minio_data:/data
      - /tmp/minio-cache:/tmp/cache
    command: server /data --console-address ":9001"
    deploy:
      resources:
        limits:
          cpus: '3.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # =============================================================================
  # STORAGE SETUP
  # =============================================================================
  minio-setup:
    image: minio/mc:latest
    container_name: glimmr-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      mc mb myminio/glimmr-files --ignore-existing;
      mc policy set public myminio/glimmr-files;
      echo 'MinIO setup complete';
      "

  # =============================================================================
  # EMAIL TESTING
  # =============================================================================
  inbucket:
    image: inbucket/inbucket:latest
    container_name: glimmr-inbucket
    ports:
      - "2500:2500"  # SMTP port
      - "8025:9000"  # Web UI port (map internal 9000 to external 8025)
      - "1100:1100"  # POP3 port
    environment:
      INBUCKET_SMTP_DOMAIN: localhost
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # AUTHENTICATION
  # =============================================================================
  authentik-postgres:
    image: postgres:16-alpine
    container_name: glimmr-authentik-postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - authentik_database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: authentik_dev_password_123
      POSTGRES_USER: authentik
      POSTGRES_DB: authentik

  authentik-redis:
    image: redis:alpine
    container_name: glimmr-authentik-redis
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - authentik_redis:/data

  authentik-server:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: glimmr-authentik-server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgres
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: authentik_dev_password_123
      AUTHENTIK_SECRET_KEY: authentik_dev_secret_key_replace_in_production
    volumes:
      - authentik_media:/media
      - authentik_custom_templates:/templates
    ports:
      - "9002:9000"  # Web UI
      - "9443:9443"  # HTTPS
    depends_on:
      - authentik-postgres
      - authentik-redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/-/health/live/"]
      interval: 30s
      timeout: 10s
      retries: 5

  authentik-worker:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: glimmr-authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgres
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: authentik_dev_password_123
      AUTHENTIK_SECRET_KEY: authentik_dev_secret_key_replace_in_production
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - authentik_media:/media
      - authentik_certs:/certs
      - authentik_custom_templates:/templates
    depends_on:
      - authentik-postgres
      - authentik-redis
    healthcheck:
      test: ["CMD-SHELL", "celery -A authentik.root.celery inspect ping -d celery@$${HOSTNAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # =============================================================================
  # GLIMMR APPLICATION
  # =============================================================================
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.dev
    container_name: glimmr-api
    environment:
      NODE_ENV: development
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: glimmr
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_SSL: false
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/glimmr
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379/0
      STORAGE_SPACES_ENDPOINT: http://minio:9000
      STORAGE_SPACES_BUCKET: glimmr-files
      STORAGE_SPACES_ACCESS_KEY: minioadmin
      STORAGE_SPACES_SECRET_KEY: minioadmin123
      JWT_SECRET: dev-jwt-secret-key
      CORS_ORIGINS: http://localhost:5174,http://localhost:3000
      # Node.js performance optimizations for M3
      NODE_OPTIONS: --max-old-space-size=1024 --enable-source-maps
      UV_THREADPOOL_SIZE: 8
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 1.5G
        reservations:
          cpus: '1.0'
          memory: 512M
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # WEB APPLICATION
  # =============================================================================
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile.dev
    container_name: glimmr-web
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3000/api/v1
      # Vite optimization for M3
      VITE_ESBUILD_TARGET: esnext
      NODE_OPTIONS: --max-old-space-size=1024
    ports:
      - "5174:5174"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/web/node_modules
    deploy:
      resources:
        limits:
          cpus: '3.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5174"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  minio_data:
  authentik_database:
  authentik_redis:
  authentik_media:
  authentik_certs:
  authentik_custom_templates: