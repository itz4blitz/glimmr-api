#!/bin/bash
# =============================================================================
# GLIMMR HEALTHCARE PIPELINE DEPLOYMENT SCRIPT
# Automated deployment with 1Password secret management
# =============================================================================

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_FILE="${SCRIPT_DIR}/.env"
COMPOSE_FILE="${SCRIPT_DIR}/docker-compose.yml"
BACKUP_DIR="${SCRIPT_DIR}/backups"

# Logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check if 1Password CLI is installed
    if ! command -v op &> /dev/null; then
        error "1Password CLI is not installed. Please install it first."
        exit 1
    fi
    
    # Check if Docker is running
    if ! docker info &> /dev/null; then
        error "Docker is not running. Please start Docker first."
        exit 1
    fi
    
    # Check if 1Password is authenticated
    if ! op account list &> /dev/null; then
        error "1Password CLI is not authenticated. Please run 'op signin' first."
        exit 1
    fi
    
    success "Prerequisites check passed"
}

# Generate secrets using 1Password
generate_secrets() {
    log "Generating secrets in 1Password..."
    
    # Check if secrets already exist
    if op item get "glimmr-postgres-master" &> /dev/null; then
        warning "Secrets already exist in 1Password. Skipping generation."
        return 0
    fi
    
    # Generate PostgreSQL master credentials
    op item create --category=database --title="glimmr-postgres-master" \
        --field="username=postgres" \
        --field="password=$(openssl rand -base64 32)" \
        --field="database=healthcare_pricing" \
        --field="host=postgres" \
        --field="port=5432" \
        --tags="glimmr,database,master"
    
    # Generate PostgreSQL app user credentials
    op item create --category=database --title="glimmr-postgres-app" \
        --field="username=glimmr_app" \
        --field="password=$(openssl rand -base64 32)" \
        --tags="glimmr,database,app"
    
    # Generate PostgreSQL Airflow user credentials
    op item create --category=database --title="glimmr-postgres-airflow" \
        --field="username=airflow_user" \
        --field="password=$(openssl rand -base64 32)" \
        --tags="glimmr,database,airflow"
    
    # Generate Redis credentials
    op item create --category=database --title="glimmr-redis-master" \
        --field="password=$(openssl rand -base64 32)" \
        --field="host=redis" \
        --field="port=6379" \
        --tags="glimmr,redis,cache"
    
    # Generate Airflow credentials
    FERNET_KEY=$(python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())")
    op item create --category=login --title="glimmr-airflow-admin" \
        --field="username=admin" \
        --field="password=$(openssl rand -base64 24)" \
        --field="fernet_key=$FERNET_KEY" \
        --field="secret_key=$(openssl rand -base64 64)" \
        --tags="glimmr,airflow,admin"
    
    # Generate API secrets
    op item create --category=api --title="glimmr-api-secrets" \
        --field="jwt_secret=$(openssl rand -base64 64)" \
        --field="api_key=$(openssl rand -base64 32)" \
        --tags="glimmr,api,security"
    
    success "Secrets generated in 1Password"
}

# Load secrets from 1Password and create .env file
load_secrets() {
    log "Loading secrets from 1Password..."
    
    # Load secrets into variables
    POSTGRES_PASSWORD=$(op item get "glimmr-postgres-master" --field password)
    POSTGRES_APP_PASSWORD=$(op item get "glimmr-postgres-app" --field password)
    POSTGRES_AIRFLOW_PASSWORD=$(op item get "glimmr-postgres-airflow" --field password)
    REDIS_PASSWORD=$(op item get "glimmr-redis-master" --field password)
    AIRFLOW_PASSWORD=$(op item get "glimmr-airflow-admin" --field password)
    AIRFLOW_FERNET_KEY=$(op item get "glimmr-airflow-admin" --field fernet_key)
    AIRFLOW_SECRET_KEY=$(op item get "glimmr-airflow-admin" --field secret_key)
    JWT_SECRET=$(op item get "glimmr-api-secrets" --field jwt_secret)
    
    # Create .env file
    cat > "$ENV_FILE" << EOF
# Generated by deploy.sh on $(date)
# DO NOT EDIT MANUALLY - Secrets are managed by 1Password

# Database Configuration
POSTGRES_DB=healthcare_pricing
POSTGRES_USER=postgres
POSTGRES_PASSWORD=$POSTGRES_PASSWORD

# Application Database Users
POSTGRES_APP_USER=glimmr_app
POSTGRES_APP_PASSWORD=$POSTGRES_APP_PASSWORD
POSTGRES_AIRFLOW_USER=airflow_user
POSTGRES_AIRFLOW_PASSWORD=$POSTGRES_AIRFLOW_PASSWORD

# Redis Configuration
REDIS_PASSWORD=$REDIS_PASSWORD

# Airflow Configuration
AIRFLOW_USERNAME=admin
AIRFLOW_PASSWORD=$AIRFLOW_PASSWORD
AIRFLOW_FERNET_KEY=$AIRFLOW_FERNET_KEY
AIRFLOW_SECRET_KEY=$AIRFLOW_SECRET_KEY

# API Configuration
JWT_SECRET=$JWT_SECRET
API_RATE_LIMIT=1000
CORS_ORIGINS=https://glimmr.health,https://app.glimmr.health

# Processing Configuration
PROCESSOR_MEMORY_LIMIT=5GB
CONCURRENT_PROCESSORS=10
MAX_FILE_SIZE=50GB
BATCH_SIZE=10000

# Monitoring Configuration
LOG_LEVEL=INFO
METRICS_ENABLED=true
HEALTH_CHECK_INTERVAL=30
EOF
    
    # Secure the .env file
    chmod 600 "$ENV_FILE"
    
    success "Secrets loaded and .env file created"
}

# Create necessary directories
create_directories() {
    log "Creating necessary directories..."
    
    mkdir -p "$BACKUP_DIR"
    mkdir -p "${SCRIPT_DIR}/airflow/dags"
    mkdir -p "${SCRIPT_DIR}/airflow/logs"
    mkdir -p "${SCRIPT_DIR}/airflow/plugins"
    mkdir -p "${SCRIPT_DIR}/processors"
    mkdir -p "${SCRIPT_DIR}/api"
    
    success "Directories created"
}

# Initialize database with secrets
init_database() {
    log "Initializing database with secrets..."
    
    # Replace placeholders in SQL init script
    POSTGRES_APP_PASSWORD=$(op item get "glimmr-postgres-app" --field password)
    POSTGRES_AIRFLOW_PASSWORD=$(op item get "glimmr-postgres-airflow" --field password)
    
    sed -i.bak \
        -e "s/REPLACE_WITH_1PASSWORD_SECRET/$POSTGRES_APP_PASSWORD/g" \
        "${SCRIPT_DIR}/postgres/init/01-init-database.sql"
    
    # Note: The sed replacement above is for the app user creation
    # The airflow user password needs a separate replacement
    sed -i \
        -e "s/CREATE USER airflow_user WITH PASSWORD 'REPLACE_WITH_1PASSWORD_SECRET'/CREATE USER airflow_user WITH PASSWORD '$POSTGRES_AIRFLOW_PASSWORD'/g" \
        "${SCRIPT_DIR}/postgres/init/01-init-database.sql"
    
    success "Database initialization script updated"
}

# Deploy services
deploy_services() {
    log "Deploying services..."
    
    # Create networks if they don't exist
    docker network create glimmr-frontend 2>/dev/null || true
    docker network create glimmr-backend 2>/dev/null || true
    
    # Deploy with Docker Compose
    docker-compose -f "$COMPOSE_FILE" up -d
    
    success "Services deployed"
}

# Health check
health_check() {
    log "Performing health checks..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        log "Health check attempt $attempt/$max_attempts"
        
        # Check PostgreSQL
        if docker-compose -f "$COMPOSE_FILE" exec -T postgres pg_isready -U postgres -d healthcare_pricing; then
            success "PostgreSQL is healthy"
            break
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            error "Health check failed after $max_attempts attempts"
            return 1
        fi
        
        sleep 10
        ((attempt++))
    done
    
    # Check other services
    sleep 30  # Give services time to start
    
    if docker-compose -f "$COMPOSE_FILE" ps | grep -q "Up"; then
        success "All services are running"
    else
        error "Some services failed to start"
        docker-compose -f "$COMPOSE_FILE" ps
        return 1
    fi
}

# Main deployment function
main() {
    log "Starting Glimmr Healthcare Pipeline deployment..."
    
    check_prerequisites
    generate_secrets
    load_secrets
    create_directories
    init_database
    deploy_services
    health_check
    
    success "Deployment completed successfully!"
    log "Access points:"
    log "  - Airflow: https://airflow.glimmr.health"
    log "  - API: https://api.glimmr.health"
    log "  - Portainer: https://portainer.glimmr.health:9000"
}

# Handle script arguments
case "${1:-deploy}" in
    "deploy")
        main
        ;;
    "secrets")
        check_prerequisites
        generate_secrets
        ;;
    "health")
        health_check
        ;;
    "logs")
        docker-compose -f "$COMPOSE_FILE" logs -f "${2:-}"
        ;;
    "stop")
        docker-compose -f "$COMPOSE_FILE" down
        ;;
    "restart")
        docker-compose -f "$COMPOSE_FILE" restart "${2:-}"
        ;;
    *)
        echo "Usage: $0 {deploy|secrets|health|logs|stop|restart}"
        echo "  deploy  - Full deployment (default)"
        echo "  secrets - Generate secrets only"
        echo "  health  - Run health checks"
        echo "  logs    - Show logs (optionally for specific service)"
        echo "  stop    - Stop all services"
        echo "  restart - Restart services (optionally specific service)"
        exit 1
        ;;
esac
